#!/usr/bin/env node

/**
 * üìã SCRIPT MASTER DE MANUTEN√á√ÉO
 * 
 * Executa rotina completa de manuten√ß√£o do MyWorkflows:
 * - Health check
 * - Auditoria de c√≥digo
 * - Testes automatizados
 * - Limpeza de arquivos tempor√°rios
 * - Otimiza√ß√£o de performance
 * - Backup de configura√ß√µes
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import runHealthCheck from './health-check.js';
import runAudit from './audit-app.js';
import runAllTests from './test-all.js';

console.log('üìã INICIANDO ROTINA COMPLETA DE MANUTEN√á√ÉO\n');

let maintenanceResults = {
  timestamp: new Date().toISOString(),
  steps: [],
  overall: 'unknown'
};

// ============================================================================
// üîß UTILITIES
// ============================================================================

function logStep(name, status, details = '') {
  const emoji = status === 'success' ? '‚úÖ' : status === 'warning' ? '‚ö†Ô∏è' : '‚ùå';
  console.log(`${emoji} ${name}: ${status.toUpperCase()}`);
  if (details) console.log(`   ${details}`);
  
  maintenanceResults.steps.push({
    name,
    status,
    details,
    timestamp: new Date().toISOString()
  });
}

// ============================================================================
// üèóÔ∏è 1. PR√â-MANUTEN√á√ÉO
// ============================================================================

async function preMaintenance() {
  console.log('üèóÔ∏è 1. PR√â-MANUTEN√á√ÉO');
  console.log('='.repeat(40));
  
  // Verificar se estamos no diret√≥rio correto
  try {
    const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
    if (packageJson.name !== 'vite_react_shadcn_ts') {
      throw new Error('Script deve ser executado na raiz do projeto MyWorkflows');
    }
    logStep('Verifica√ß√£o de Diret√≥rio', 'success', 'Executando na raiz do projeto');
  } catch (error) {
    logStep('Verifica√ß√£o de Diret√≥rio', 'error', error.message);
    return false;
  }
  
  // Criar backup das configura√ß√µes importantes
  try {
    const backupDir = './maintenance-backup';
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }
    
    const filesToBackup = [
      'package.json',
      '.env.example',
      'vite.config.ts',
      'tailwind.config.ts',
      'tsconfig.json'
    ];
    
    filesToBackup.forEach(file => {
      if (fs.existsSync(file)) {
        fs.copyFileSync(file, path.join(backupDir, file));
      }
    });
    
    logStep('Backup de Configura√ß√µes', 'success', `${filesToBackup.length} arquivos salvos`);
  } catch (error) {
    logStep('Backup de Configura√ß√µes', 'warning', error.message);
  }
  
  // Verificar se servidores est√£o rodando
  try {
    const response = await fetch('http://localhost:3002/health', { timeout: 3000 });
    if (response.ok) {
      logStep('Status dos Servidores', 'success', 'Servidores est√£o rodando');
    } else {
      logStep('Status dos Servidores', 'warning', 'Servidores responsivos mas com problemas');
    }
  } catch (error) {
    logStep('Status dos Servidores', 'warning', 'Servidores n√£o est√£o rodando - alguns testes podem falhar');
  }
  
  console.log('');
  return true;
}

// ============================================================================
// üîç 2. HEALTH CHECK
// ============================================================================

async function runMaintenanceHealthCheck() {
  console.log('üîç 2. HEALTH CHECK COMPLETO');
  console.log('='.repeat(40));
  
  try {
    const exitCode = await runHealthCheck();
    
    switch (exitCode) {
      case 0:
        logStep('Health Check', 'success', 'Sistema totalmente saud√°vel');
        break;
      case 1:
        logStep('Health Check', 'warning', 'Sistema com avisos menores');
        break;
      case 2:
        logStep('Health Check', 'warning', 'Sistema com degrada√ß√£o');
        break;
      default:
        logStep('Health Check', 'error', 'Sistema com problemas cr√≠ticos');
    }
  } catch (error) {
    logStep('Health Check', 'error', error.message);
  }
  
  console.log('');
}

// ============================================================================
// üîç 3. AUDITORIA DE C√ìDIGO
// ============================================================================

async function runMaintenanceAudit() {
  console.log('üîç 3. AUDITORIA DE C√ìDIGO');
  console.log('='.repeat(40));
  
  try {
    await runAudit();
    logStep('Auditoria de C√≥digo', 'success', 'Auditoria conclu√≠da - veja audit-report.json');
  } catch (error) {
    logStep('Auditoria de C√≥digo', 'error', error.message);
  }
  
  console.log('');
}

// ============================================================================
// üß™ 4. TESTES AUTOMATIZADOS
// ============================================================================

async function runMaintenanceTests() {
  console.log('üß™ 4. TESTES AUTOMATIZADOS');
  console.log('='.repeat(40));
  
  try {
    const exitCode = await runAllTests();
    
    switch (exitCode) {
      case 0:
        logStep('Testes Automatizados', 'success', 'Todos os testes passaram');
        break;
      case 1:
        logStep('Testes Automatizados', 'warning', 'Maioria dos testes passou');
        break;
      default:
        logStep('Testes Automatizados', 'error', 'Muitos testes falharam');
    }
  } catch (error) {
    logStep('Testes Automatizados', 'error', error.message);
  }
  
  console.log('');
}

// ============================================================================
// üßπ 5. LIMPEZA E OTIMIZA√á√ÉO
// ============================================================================

async function cleanupAndOptimize() {
  console.log('üßπ 5. LIMPEZA E OTIMIZA√á√ÉO');
  console.log('='.repeat(40));
  
  // Limpar node_modules cache
  try {
    execSync('npm cache clean --force', { stdio: 'pipe' });
    logStep('Limpeza do Cache NPM', 'success', 'Cache limpo');
  } catch (error) {
    logStep('Limpeza do Cache NPM', 'warning', 'Erro ao limpar cache');
  }
  
  // Limpar arquivos de build antigos
  try {
    if (fs.existsSync('./dist')) {
      fs.rmSync('./dist', { recursive: true, force: true });
    }
    logStep('Limpeza de Build', 'success', 'Arquivos de build removidos');
  } catch (error) {
    logStep('Limpeza de Build', 'warning', error.message);
  }
  
  // Atualizar dependencies (verifica√ß√£o)
  try {
    const outdated = execSync('npm outdated --json', { 
      stdio: 'pipe', 
      encoding: 'utf8' 
    });
    
    if (outdated.trim()) {
      const outdatedPackages = JSON.parse(outdated);
      const count = Object.keys(outdatedPackages).length;
      logStep('Verifica√ß√£o de Dependencies', 'warning', 
        `${count} packages desatualizados encontrados`);
    } else {
      logStep('Verifica√ß√£o de Dependencies', 'success', 'Todas as dependencies atualizadas');
    }
  } catch (error) {
    // npm outdated retorna exit code 1 quando h√° packages outdated
    if (error.stdout && error.stdout.trim()) {
      try {
        const outdatedPackages = JSON.parse(error.stdout);
        const count = Object.keys(outdatedPackages).length;
        logStep('Verifica√ß√£o de Dependencies', 'warning', 
          `${count} packages desatualizados`);
      } catch (parseError) {
        logStep('Verifica√ß√£o de Dependencies', 'success', 'Dependencies parecem atualizadas');
      }
    } else {
      logStep('Verifica√ß√£o de Dependencies', 'warning', 'N√£o foi poss√≠vel verificar');
    }
  }
  
  // Verificar vulnerabilidades de seguran√ßa
  try {
    execSync('npm audit --audit-level=high', { stdio: 'pipe' });
    logStep('Verifica√ß√£o de Seguran√ßa', 'success', 'Nenhuma vulnerabilidade cr√≠tica');
  } catch (error) {
    logStep('Verifica√ß√£o de Seguran√ßa', 'warning', 'Vulnerabilidades encontradas');
  }
  
  // Testar build
  try {
    execSync('npm run build', { stdio: 'pipe', timeout: 60000 });
    logStep('Teste de Build', 'success', 'Build executado com sucesso');
  } catch (error) {
    logStep('Teste de Build', 'error', 'Build falhou');
  }
  
  console.log('');
}

// ============================================================================
// üìä 6. M√âTRICAS E RELAT√ìRIOS
// ============================================================================

async function generateMetrics() {
  console.log('üìä 6. M√âTRICAS E RELAT√ìRIOS');
  console.log('='.repeat(40));
  
  try {
    // Analisar tamanho do projeto
    const getSizeRecursive = (dir) => {
      let size = 0;
      const items = fs.readdirSync(dir, { withFileTypes: true });
      
      items.forEach(item => {
        const fullPath = path.join(dir, item.name);
        if (item.isDirectory() && item.name !== 'node_modules' && !item.name.startsWith('.')) {
          size += getSizeRecursive(fullPath);
        } else if (item.isFile()) {
          size += fs.statSync(fullPath).size;
        }
      });
      
      return size;
    };
    
    const projectSize = getSizeRecursive('./src');
    const projectSizeMB = (projectSize / 1024 / 1024).toFixed(1);
    
    logStep('An√°lise de Tamanho', 'success', `Projeto: ${projectSizeMB}MB`);
    
    // Contar arquivos de c√≥digo
    const getFileCount = (dir, extensions) => {
      let count = 0;
      const items = fs.readdirSync(dir, { withFileTypes: true });
      
      items.forEach(item => {
        const fullPath = path.join(dir, item.name);
        if (item.isDirectory() && !item.name.startsWith('.')) {
          count += getFileCount(fullPath, extensions);
        } else if (item.isFile() && extensions.some(ext => item.name.endsWith(ext))) {
          count++;
        }
      });
      
      return count;
    };
    
    const codeFiles = getFileCount('./src', ['.ts', '.tsx', '.js', '.jsx']);
    logStep('Contagem de Arquivos', 'success', `${codeFiles} arquivos de c√≥digo`);
    
    // Analisar dependencies
    const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
    const depCount = Object.keys(packageJson.dependencies || {}).length;
    const devDepCount = Object.keys(packageJson.devDependencies || {}).length;
    
    logStep('An√°lise de Dependencies', 'success', 
      `${depCount} dependencies, ${devDepCount} devDependencies`);
    
  } catch (error) {
    logStep('Gera√ß√£o de M√©tricas', 'error', error.message);
  }
  
  console.log('');
}

// ============================================================================
// üìä 7. RELAT√ìRIO FINAL
// ============================================================================

function generateMaintenanceReport() {
  console.log('üìä RELAT√ìRIO FINAL DE MANUTEN√á√ÉO');
  console.log('='.repeat(40));
  
  const successCount = maintenanceResults.steps.filter(s => s.status === 'success').length;
  const warningCount = maintenanceResults.steps.filter(s => s.status === 'warning').length;
  const errorCount = maintenanceResults.steps.filter(s => s.status === 'error').length;
  const total = maintenanceResults.steps.length;
  
  console.log(`‚úÖ Etapas bem-sucedidas: ${successCount}`);
  console.log(`‚ö†Ô∏è  Etapas com avisos: ${warningCount}`);
  console.log(`‚ùå Etapas com erros: ${errorCount}`);
  console.log(`üìä Total de etapas: ${total}`);
  console.log('');
  
  // Determinar status geral
  if (errorCount === 0 && warningCount === 0) {
    maintenanceResults.overall = 'excellent';
    console.log('üéâ MANUTEN√á√ÉO PERFEITA! Sistema em excelente estado.');
  } else if (errorCount === 0 && warningCount <= 3) {
    maintenanceResults.overall = 'good';
    console.log('üòä MANUTEN√á√ÉO BOA! Sistema saud√°vel com pequenos avisos.');
  } else if (errorCount <= 2) {
    maintenanceResults.overall = 'fair';
    console.log('üòê MANUTEN√á√ÉO RAZO√ÅVEL! Sistema precisa de aten√ß√£o.');
  } else {
    maintenanceResults.overall = 'poor';
    console.log('üòü MANUTEN√á√ÉO PROBLEM√ÅTICA! Sistema requer corre√ß√µes imediatas.');
  }
  
  console.log('');
  
  // Mostrar pr√≥ximos passos
  console.log('üîÑ PR√ìXIMOS PASSOS RECOMENDADOS:');
  
  if (warningCount > 0 || errorCount > 0) {
    console.log('   1. Revisar itens com avisos/erros acima');
    console.log('   2. Corrigir problemas cr√≠ticos primeiro');
  }
  
  console.log('   3. Execute esta manuten√ß√£o semanalmente');
  console.log('   4. Monitore relat√≥rios de health-check diariamente');
  console.log('   5. Mantenha dependencies atualizadas');
  console.log('   6. Execute testes antes de cada deploy');
  console.log('');
  
  // Salvar relat√≥rio completo
  const reportPath = './maintenance-report.json';
  maintenanceResults.duration = Date.now() - startTime;
  fs.writeFileSync(reportPath, JSON.stringify(maintenanceResults, null, 2));
  
  console.log(`üìÑ Relat√≥rio completo salvo em: ${reportPath}`);
  
  return maintenanceResults.overall;
}

// ============================================================================
// üöÄ MAIN EXECUTION
// ============================================================================

let startTime;

async function runMaintenance() {
  startTime = Date.now();
  
  console.log('üéØ MYWORKFLOWS - MANUTEN√á√ÉO COMPLETA');
  console.log('üìÖ Data:', new Date().toLocaleString());
  console.log('‚è±Ô∏è  Iniciando manuten√ß√£o...');
  console.log('\n');
  
  try {
    // Executar todas as etapas
    const preCheck = await preMaintenance();
    if (!preCheck) {
      console.log('‚ùå Pr√©-verifica√ß√£o falhou. Abortando manuten√ß√£o.');
      return 1;
    }
    
    await runMaintenanceHealthCheck();
    await runMaintenanceAudit();
    await runMaintenanceTests();
    await cleanupAndOptimize();
    await generateMetrics();
    
    const duration = ((Date.now() - startTime) / 1000).toFixed(1);
    console.log(`‚è±Ô∏è  Manuten√ß√£o conclu√≠da em ${duration}s\n`);
    
    const overallStatus = generateMaintenanceReport();
    
    // Return appropriate exit code
    switch (overallStatus) {
      case 'excellent': return 0;
      case 'good': return 0;
      case 'fair': return 1;
      case 'poor': return 2;
      default: return 3;
    }
    
  } catch (error) {
    console.error('üí• Erro cr√≠tico durante manuten√ß√£o:', error);
    return 4;
  }
}

// Execute se for o script principal
if (import.meta.url === `file://${process.argv[1]}`) {
  runMaintenance()
    .then(exitCode => {
      console.log(`\nüèÅ Manuten√ß√£o finalizada com c√≥digo: ${exitCode}`);
      process.exit(exitCode);
    })
    .catch(error => {
      console.error('Fatal error:', error);
      process.exit(4);
    });
}

export default runMaintenance;